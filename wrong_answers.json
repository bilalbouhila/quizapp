{"question_number": 1, "question": "Your company built a TensorFlow neutral-network model with a large number of neurons and layers. The model fits well for the training data. However, when tested against new data, it performs poorly. What method can you employ to address this?", "user_answer": [], "correct_answer": ["Dropout Methods"], "Explanation": "The model is overfitting. A dropout method can be used to prevent overfitting by randomly setting a fraction of input units to 0 at each update during training time, which helps to prevent overfitting.", "All options": ["Threading", "Serialization", "Dropout Methods", "Dimensionality Reduction"]}
{"question_number": 2, "question": "You are building a model to make clothing recommendations. You know a user's fashion preference is likely to change over time, so you build a data pipeline to stream new data back to the model as it becomes available. How should you use this data to train the model?", "user_answer": [], "correct_answer": ["Continuously retrain the model on a combination of existing data and the new data"], "Explanation": "To keep the model updated and also not to lose the previous patterns, the model should be continuously retrained on a mix of the existing data and the new data.", "All options": ["Continuously retrain the model on just the new data", "Continuously retrain the model on a combination of existing data and the new data", "Train on the existing data while using the new data as your test set", "Train on the new data while using the existing data as your test set"]}
{"question_number": 3, "question": "You designed a database for patient records as a pilot project to cover a few hundred patients in three clinics. Your design used a single database table to represent all patients and their visits, and you used self-joins to generate reports. The server resource utilization was at 50%. Since then, the scope of the project has expanded. The database must now store 100 times more patient records. You can no longer run the reports, because they either take too long or they encounter errors with insufficient compute resources. How should you adjust the database design?", "user_answer": [], "correct_answer": ["Normalize the master patient-record table into the patient table and the visits table, and create other necessary tables to avoid self-join"], "Explanation": "Normalization is a process that removes redundancy in a relational database and improves its design. It would help to reduce the complexity of the queries, improve the efficiency, and reduce the load on compute resources.", "All options": ["Add capacity (memory and disk space) to the database server by the order of 200", "Shard the tables into smaller ones based on date ranges, and only generate reports with prespecified date ranges", "Normalize the master patient-record table into the patient table and the visits table, and create other necessary tables to avoid self-join", "Partition the table into smaller tables, with one for each clinic. Run queries against the smaller table pairs, and use unions for consolidated reports"]}
{"question_number": 4, "question": "You create an important report for your large team in Google Data Studio 360. The report uses Google BigQuery as its data source. You notice that visualizations are not showing data that is less than 1 hour old. What should you do?", "user_answer": [], "correct_answer": ["Disable caching by editing the report settings"], "Explanation": "In Google Data Studio, the data source cache improves report performance by storing the data returned by the data source. If you disable caching in the report settings, the reports will fetch the latest data directly from the data source, improving the freshness of the data displayed in your report.", "All options": ["Disable caching by editing the report settings", "Disable caching in BigQuery by editing table details", "Refresh your browser tab showing the visualizations", "Clear your browser history for the past hour then reload the tab showing the virtualizations"]}
{"question_number": 5, "question": "An external customer provides you with a daily dump of data from their database. The data flows into Google Cloud Storage GCS as comma-separated values (CSV) files. You want to analyze this data in Google BigQuery, but the data could have rows that are formatted incorrectly or corrupted. How should you build this pipeline?", "user_answer": [], "correct_answer": ["Run a Google Cloud Dataflow batch pipeline to import the data into BigQuery, and push errors to another dead-letter table for analysis"], "Explanation": "By running a Google Cloud Dataflow batch pipeline, it provides the ability to handle errors during the process. The corrupted or incorrectly formatted rows can be pushed to a separate 'dead-letter' table for further analysis, ensuring that the main analysis is not hampered by such records.", "All options": ["Use federated data sources, and check data in the SQL query", "Enable BigQuery monitoring in Google Stackdriver and create an alert", "Import the data into BigQuery using the gcloud CLI and set max_bad_records to 0", "Run a Google Cloud Dataflow batch pipeline to import the data into BigQuery, and push errors to another dead-letter table for analysis"]}
